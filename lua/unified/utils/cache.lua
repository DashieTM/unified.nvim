local M = {}

--- Creates a cached version of a given function.
-- The cache uses a key generated by concatenating the string representations
-- of the function's arguments, separated by '::'.
-- Only non-nil results are cached.
---@param original_func fun(...):any The function to wrap with caching.
---@return fun(...):any -- A new function that caches the results of original_func.
function M.memoize(original_func)
  ---@type table<string, any>
  local cache = {}

  return function(...)
    ---@type any[]
    local args = { ... }
    ---@type string[]
    local key_parts = {}
    for i = 1, #args do
      key_parts[i] = tostring(args[i])
    end
    ---@type string
    local cache_key = table.concat(key_parts, "::")

    if cache[cache_key] then
      return cache[cache_key]
    end

    ---@type any
    local result = original_func(...)

    if result ~= nil then
      cache[cache_key] = result
    end

    return result
  end
end

return M
